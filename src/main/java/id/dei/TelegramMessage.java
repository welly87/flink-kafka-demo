/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package id.dei;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TelegramMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6020353497492216583L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TelegramMessage\",\"namespace\":\"id.dei\",\"fields\":[{\"name\":\"viewtime\",\"type\":\"long\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"chatId\",\"type\":\"string\"},{\"name\":\"messageId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TelegramMessage> ENCODER =
      new BinaryMessageEncoder<TelegramMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TelegramMessage> DECODER =
      new BinaryMessageDecoder<TelegramMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TelegramMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TelegramMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TelegramMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TelegramMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TelegramMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TelegramMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TelegramMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TelegramMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long viewtime;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.lang.CharSequence chatId;
  @Deprecated public java.lang.CharSequence messageId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TelegramMessage() {}

  /**
   * All-args constructor.
   * @param viewtime The new value for viewtime
   * @param username The new value for username
   * @param message The new value for message
   * @param chatId The new value for chatId
   * @param messageId The new value for messageId
   */
  public TelegramMessage(java.lang.Long viewtime, java.lang.CharSequence username, java.lang.CharSequence message, java.lang.CharSequence chatId, java.lang.CharSequence messageId) {
    this.viewtime = viewtime;
    this.username = username;
    this.message = message;
    this.chatId = chatId;
    this.messageId = messageId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return viewtime;
    case 1: return username;
    case 2: return message;
    case 3: return chatId;
    case 4: return messageId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: viewtime = (java.lang.Long)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: message = (java.lang.CharSequence)value$; break;
    case 3: chatId = (java.lang.CharSequence)value$; break;
    case 4: messageId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'viewtime' field.
   * @return The value of the 'viewtime' field.
   */
  public long getViewtime() {
    return viewtime;
  }


  /**
   * Sets the value of the 'viewtime' field.
   * @param value the value to set.
   */
  public void setViewtime(long value) {
    this.viewtime = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'chatId' field.
   * @return The value of the 'chatId' field.
   */
  public java.lang.CharSequence getChatId() {
    return chatId;
  }


  /**
   * Sets the value of the 'chatId' field.
   * @param value the value to set.
   */
  public void setChatId(java.lang.CharSequence value) {
    this.chatId = value;
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.CharSequence getMessageId() {
    return messageId;
  }


  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.CharSequence value) {
    this.messageId = value;
  }

  /**
   * Creates a new TelegramMessage RecordBuilder.
   * @return A new TelegramMessage RecordBuilder
   */
  public static id.dei.TelegramMessage.Builder newBuilder() {
    return new id.dei.TelegramMessage.Builder();
  }

  /**
   * Creates a new TelegramMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TelegramMessage RecordBuilder
   */
  public static id.dei.TelegramMessage.Builder newBuilder(id.dei.TelegramMessage.Builder other) {
    if (other == null) {
      return new id.dei.TelegramMessage.Builder();
    } else {
      return new id.dei.TelegramMessage.Builder(other);
    }
  }

  /**
   * Creates a new TelegramMessage RecordBuilder by copying an existing TelegramMessage instance.
   * @param other The existing instance to copy.
   * @return A new TelegramMessage RecordBuilder
   */
  public static id.dei.TelegramMessage.Builder newBuilder(id.dei.TelegramMessage other) {
    if (other == null) {
      return new id.dei.TelegramMessage.Builder();
    } else {
      return new id.dei.TelegramMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for TelegramMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TelegramMessage>
    implements org.apache.avro.data.RecordBuilder<TelegramMessage> {

    private long viewtime;
    private java.lang.CharSequence username;
    private java.lang.CharSequence message;
    private java.lang.CharSequence chatId;
    private java.lang.CharSequence messageId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(id.dei.TelegramMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.viewtime)) {
        this.viewtime = data().deepCopy(fields()[0].schema(), other.viewtime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.chatId)) {
        this.chatId = data().deepCopy(fields()[3].schema(), other.chatId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.messageId)) {
        this.messageId = data().deepCopy(fields()[4].schema(), other.messageId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TelegramMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(id.dei.TelegramMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.viewtime)) {
        this.viewtime = data().deepCopy(fields()[0].schema(), other.viewtime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.chatId)) {
        this.chatId = data().deepCopy(fields()[3].schema(), other.chatId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.messageId)) {
        this.messageId = data().deepCopy(fields()[4].schema(), other.messageId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'viewtime' field.
      * @return The value.
      */
    public long getViewtime() {
      return viewtime;
    }


    /**
      * Sets the value of the 'viewtime' field.
      * @param value The value of 'viewtime'.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder setViewtime(long value) {
      validate(fields()[0], value);
      this.viewtime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'viewtime' field has been set.
      * @return True if the 'viewtime' field has been set, false otherwise.
      */
    public boolean hasViewtime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'viewtime' field.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder clearViewtime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'chatId' field.
      * @return The value.
      */
    public java.lang.CharSequence getChatId() {
      return chatId;
    }


    /**
      * Sets the value of the 'chatId' field.
      * @param value The value of 'chatId'.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder setChatId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.chatId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'chatId' field has been set.
      * @return True if the 'chatId' field has been set, false otherwise.
      */
    public boolean hasChatId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'chatId' field.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder clearChatId() {
      chatId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageId() {
      return messageId;
    }


    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder setMessageId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.messageId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public id.dei.TelegramMessage.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TelegramMessage build() {
      try {
        TelegramMessage record = new TelegramMessage();
        record.viewtime = fieldSetFlags()[0] ? this.viewtime : (java.lang.Long) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.chatId = fieldSetFlags()[3] ? this.chatId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.messageId = fieldSetFlags()[4] ? this.messageId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TelegramMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<TelegramMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TelegramMessage>
    READER$ = (org.apache.avro.io.DatumReader<TelegramMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.viewtime);

    out.writeString(this.username);

    out.writeString(this.message);

    out.writeString(this.chatId);

    out.writeString(this.messageId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.viewtime = in.readLong();

      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.chatId = in.readString(this.chatId instanceof Utf8 ? (Utf8)this.chatId : null);

      this.messageId = in.readString(this.messageId instanceof Utf8 ? (Utf8)this.messageId : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.viewtime = in.readLong();
          break;

        case 1:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 2:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 3:
          this.chatId = in.readString(this.chatId instanceof Utf8 ? (Utf8)this.chatId : null);
          break;

        case 4:
          this.messageId = in.readString(this.messageId instanceof Utf8 ? (Utf8)this.messageId : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










